{"version":3,"file":"static/webpack/static/development/pages/list.js.3b3ee6ffadc24238e22a.hot-update.js","sources":["webpack:///./pages/list.js"],"sourcesContent":["import Layout from '../components/SiteLayout';\nimport Modal from '../components/Modal';\nimport NameForm from '../components/NameForm';\nimport EditForm from '../components/EditForm';\nimport {Component} from 'react';\nimport http from '../utils/http';\nimport {getColorClassPerUser} from '../utils/colors';\nimport { getToken } from '../utils/token'\nclass List extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            taskText: '',\n            list: JSON.parse(JSON.stringify(props.list)),\n            showModal: false,\n            modal: 'nameForm',\n            editingTask: false,\n            listenerAdded: false,\n        };\n    }\n\n    static async getInitialProps(props) {\n        let key = props.query.title;\n        let token = getToken(props)\n        const data = await http.getJson(`/api/l/${key}/`, token);\n\n        return {\n            list: data,\n        };\n    }\n\n    async onTaskUnassign(taskKey, userKey) {\n        await http.putJson(`/api/t/${taskKey}/`, {\n            'users': ['-' + userKey],\n        });\n        const list = await http.getJson(`/api/l/${this.state.list.url_key}/`);\n        this.setState({showModal: false, list: list});\n    }\n\n    async onTaskAssign(task) {\n        this.setState({modal: 'nameForm', clickedTask: task, showModal: true})\n    }\n\n    async onEditList() {\n        this.setState({modal: 'editForm',  showModal: true})\n    }\n\n    async onUserPick(key) {\n        await http.putJson(`/api/t/${this.state.clickedTask.key}/`, {\n            'users': [key],\n        });\n        const list = await http.getJson(`/api/l/${this.state.list.url_key}/`);\n        this.setState({showModal: false, list: list});\n    }\n\n    async createTask() {\n        if (this.state.taskText.trim() != '') {\n            const newTask = await http.postJson('/api/t/', {\n                text: this.state.taskText,\n                list: this.props.list.url_key,\n            });\n\n            const list = await http.getJson(`/api/l/${this.state.list.url_key}/`);\n            this.setState({list: list, taskText: ''});\n        }\n    }\n\n    async taskClick(target, task) {\n        let status = target.checked ? 'done' : 'waiting';\n        task.status = status //hackish way to implement optimistic modification\n        this.setState({list: this.state.list})\n        await http.putJson('/api/t/' + target.id + '/', {\n            status: status,\n        });\n        const newList = await http.getJson(`/api/l/${this.state.list.url_key}/`);\n        this.setState({list: newList, editingTask: true});\n    }\n\n    taskEdit(taskKey) {\n\n        const listClone = JSON.parse(JSON.stringify(this.state.list));\n        listClone.tasks.map((task) => {\n            if (task.key == taskKey) {\n                task.edit = true;\n            } else {\n                task.edit = false;\n            }\n        });\n        this.setState({list: listClone, editingTask: false});\n    }\n\n    async taskChange(taskKey, text) {\n        await http.putJson('/api/t/' + taskKey + '/', {\n            text: text,\n        });\n        const newList = await http.getJson(`/api/l/${this.state.list.url_key}/`);\n        this.setState({list: newList});\n    }\n\n    async handleVisibilityChange() {\n        if (!document.hidden) {\n            const data = await http.getJson(`/api/l/${this.state.list.url_key}/`);\n            this.setState({list: data});\n        }\n    }\n\n    render() {\n        if (!this.state.listenerAdded) {\n\n            if (typeof window !== 'undefined') {\n                document.addEventListener('visibilitychange', () => this.handleVisibilityChange(), false);\n                window.addEventListener('focus', () => this.handleVisibilityChange(), false);\n                this.state.listenerAdded = true;\n            }\n        }\n        const props = this.props;\n        const list = this.state.list;\n\n        const colorClassPerUser = getColorClassPerUser(list.members);\n        let innerComponent\n        let modalTitle\n        if (this.state.modal === 'nameForm') {\n            innerComponent = <NameForm list={list}\n                                       colorClassPerUser={colorClassPerUser}\n                                       onUserPicked={(key) => this.onUserPick(key)}\n                                       task={this.state.clickedTask}\n                                       onNewList={(list) => {\n                                           this.setState({list: list});\n                                       }}\n            />;\n            modalTitle = \"Tap on a name\"\n        } else {\n            innerComponent = <EditForm list={list}\n                                       onNewList={(list) => {\n                this.setState({list: list});\n            }}/>\n            modalTitle = \"Edit the list\"\n\n        }\n\n        return <Layout meta={props.list}>\n            <div className=\"list-edit-icon\"  onClick={() => this.onEditList()}><i className=\"far fa-edit fa-xs\"></i></div>\n            <h1>{props.list.name} </h1>\n            <p>{props.list.description}</p>\n            <div>\n                {list.tasks.map((task) => {\n                    const className = 'taskText ' + ((task.status === 'done') ? 'strike' : '');\n                    return <div className=\"listItem\" key={task.key}>\n                        <input type=\"checkbox\" id={task.key} onChange={(event) => {\n                            this.taskClick(event.target, task);\n                        }} checked={task.status === 'done'}/>\n                        {!task.edit && <span className={className} onClick={() => {\n                            this.taskEdit(task.key);\n                        }\n                        }>{task.text}</span>}\n                        {task.edit && <span> <input type=\"text\" autoFocus defaultValue={task.text} onBlur={(event) => {\n                            this.taskChange(task.key, event.target.value);\n                        }} onKeyUp={(e) => {\n                            if (e && e.key == 'Enter') this.taskChange(task.key, event.target.value);\n                        }}/> </span>}\n\n                        {this.state.list.assignationsOn && task.assigned_to.map(user =>\n                            <span className={'userName ' + colorClassPerUser[user.key]}\n                                  onClick={() => this.onTaskUnassign(task.key, user.key)}\n                                  key={'' + user.key + '' + task.key}>\n                                <span>{user.name}</span>\n                            </span>,\n                        )}\n                        {\n                            this.state.list.assignationsOn && task.assigned_to.length === 0 &&\n                            <span className=\"assignButton\" onClick={() => this.onTaskAssign(task)}>Assign</span>\n                        }\n                        {\n                            this.state.list.assignationsOn && task.assigned_to.length !== 0 &&\n                            <span className=\"assignButton\" onClick={() => this.onTaskAssign(task)}><i\n                                className=\"fas fa-plus\"></i></span>\n                        }\n                    </div>;\n                })}\n\n            </div>\n\n            <div><input type=\"text\" id=\"taskText\" autoFocus={!this.state.editingTask} value={this.state.taskText}\n                        onChange={(event) => {\n                            this.setState({taskText: event.target.value});\n                        }} placeholder=\"New task here ...\" onKeyUp={(e) => {\n                if (e && e.key == 'Enter') this.createTask();\n            }}/>\n                <br/>\n                <button onClick={() => this.createTask()}>Add</button>\n            </div>\n            <Modal title={modalTitle} show={this.state.showModal} onClose={() => this.setState({showModal: false})}\n                   innerComponent={innerComponent}/>\n            <style jsx>{`\n            .taskText {\n                padding:5px;\n            }\n\n            .assignButton {\n                color:#1E90FF;\n                padding:4px;\n                background: #eee;\n                border-radius: 3px;\n                cursor: pointer;\n            }\n\n            .listItem {\n                padding:5px;\n                margin:1px;\n            }\n\n            .itemText {\n                padding: 3 5;\n            }\n\n            .strike {\n                text-decoration: line-through;\n            }\n            .container {\n                display: block;\n                position: relative;\n                padding-left: 35px;\n                margin-bottom: 12px;\n                cursor: pointer;\n                font-size: 22px;\n                -webkit-user-select: none;\n                -moz-user-select: none;\n                -ms-user-select: none;\n                user-select: none;\n                }\n\n                /* Hide the browser's default checkbox */\n                .container input {\n                position: absolute;\n                opacity: 0;\n                cursor: pointer;\n                height: 0;\n                width: 0;\n                }\n\n                /* Create a custom checkbox */\n                .checkmark {\n                position: absolute;\n                top: 0;\n                left: 0;\n                height: 25px;\n                width: 25px;\n                border-radius:3px;\n                background-color: #eee;\n                }\n\n                /* On mouse-over, add a grey background color */\n                .container:hover input ~ .checkmark {\n                background-color: #ccc;\n                }\n\n                /* When the checkbox is checked, add a blue background */\n                .container input:checked ~ .checkmark {\n                background-color: #2196F3;\n                }\n\n                /* Create the checkmark/indicator (hidden when not checked) */\n                .checkmark:after {\n                content: \"\";\n                position: absolute;\n                display: none;\n                }\n\n                /* Show the checkmark when checked */\n                .container input:checked ~ .checkmark:after {\n                display: block;\n                }\n\n                /* Style the checkmark/indicator */\n                .container .checkmark:after {\n                left: 9px;\n                top: 5px;\n                width: 5px;\n                height: 10px;\n                border: solid white;\n                border-width: 0 3px 3px 0;\n                -webkit-transform: rotate(45deg);\n                -ms-transform: rotate(45deg);\n                transform: rotate(45deg);\n                }\n\n                .nameLabel {\n                    display: inline;\n                    font-weight: 100;\n                }\n                .list-edit-icon {\n                    font-size:2em;\n                    float:right;\n                    padding-left:10px;\n                }\n                .fa-edit {\n                    color: #ddd;\n                    cursor: pointer;\n                }\n    `}</style>\n        </Layout>;\n    }\n}\n\nexport default List;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAUA;AACA;;;;;;AAWA;;;;;;;AACA;AACA;AADA;AACA;;;AAEA;AACA;;AADA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;AADA;AACA;;;AAEA;AACA;;AADA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AACA;AACA;AACA;AAFA;AACA;;AADA;;AAKA;AACA;;AADA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;AADA;AACA;;;AAEA;AACA;;AADA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA;;;;;;;AACA;AACA;AADA;AACA;;;AAEA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AACA;AACA;;AADA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAAA;AAGA;AACA;AACA;AAFA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAAA;AAMA;AAEA;AAAA;AAAA;AACA;AAFA;AAAA;AAGA;AAAA;AAJA;AASA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAnDA;AAAA;AAAA;AAiKA;;;;;;AAxRA;;;;;;AACA;AACA;;AACA;AACA;;AADA;AAEA;AACA;AADA;AACA;;;;;;;;;;;;;;;;;;AAnBA;AACA;AAuSA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}